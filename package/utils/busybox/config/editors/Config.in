# DO NOT EDIT. This file is generated from Config.src
#
# For a description of the syntax of this configuration file,
# see docs/Kconfig-language.txt.
#

menu "Editors"

config BUSYBOX_CONFIG_AWK
	bool "awk (23 kb)"
	default BUSYBOX_DEFAULT_AWK
	help
	Awk is used as a pattern scanning and processing language.

config BUSYBOX_CONFIG_FEATURE_AWK_LIBM
	bool "Enable math functions (requires libm)"
	default BUSYBOX_DEFAULT_FEATURE_AWK_LIBM
	depends on BUSYBOX_CONFIG_AWK
	help
	Enable math functions of the Awk programming language.
	NOTE: This requires libm to be present for linking.

config BUSYBOX_CONFIG_FEATURE_AWK_GNU_EXTENSIONS
	bool "Enable a few GNU extensions"
	default BUSYBOX_DEFAULT_FEATURE_AWK_GNU_EXTENSIONS
	depends on BUSYBOX_CONFIG_AWK
	help
	Enable a few features from gawk:
	* command line option -e AWK_PROGRAM
	* simultaneous use of -f and -e on the command line.
	This enables the use of awk library files.
	Example: awk -f mylib.awk -e '{print myfunction($1);}' ...
config BUSYBOX_CONFIG_CMP
	bool "cmp (4.9 kb)"
	default BUSYBOX_DEFAULT_CMP
	help
	cmp is used to compare two files and returns the result
	to standard output.
config BUSYBOX_CONFIG_DIFF
	bool "diff (13 kb)"
	default BUSYBOX_DEFAULT_DIFF
	help
	diff compares two files or directories and outputs the
	differences between them in a form that can be given to
	the patch command.

config BUSYBOX_CONFIG_FEATURE_DIFF_LONG_OPTIONS
	bool "Enable long options"
	default BUSYBOX_DEFAULT_FEATURE_DIFF_LONG_OPTIONS
	depends on BUSYBOX_CONFIG_DIFF && BUSYBOX_CONFIG_LONG_OPTS

config BUSYBOX_CONFIG_FEATURE_DIFF_DIR
	bool "Enable directory support"
	default BUSYBOX_DEFAULT_FEATURE_DIFF_DIR
	depends on BUSYBOX_CONFIG_DIFF
	help
	This option enables support for directory and subdirectory
	comparison.
config BUSYBOX_CONFIG_ED
	bool "ed (21 kb)"
	default BUSYBOX_DEFAULT_ED
	help
	The original 1970's Unix text editor, from the days of teletypes.
	Small, simple, evil. Part of SUSv3. If you're not already using
	this, you don't need it.
config BUSYBOX_CONFIG_PATCH
	bool "patch (9.4 kb)"
	default BUSYBOX_DEFAULT_PATCH
	help
	Apply a unified diff formatted patch.
config BUSYBOX_CONFIG_SED
	bool "sed (12 kb)"
	default BUSYBOX_DEFAULT_SED
	help
	sed is used to perform text transformations on a file
	or input from a pipeline.
config BUSYBOX_CONFIG_VI
	bool "vi (23 kb)"
	default BUSYBOX_DEFAULT_VI
	help
	'vi' is a text editor. More specifically, it is the One True
	text editor <grin>. It does, however, have a rather steep
	learning curve. If you are not already comfortable with 'vi'
	you may wish to use something else.

config BUSYBOX_CONFIG_FEATURE_VI_MAX_LEN
	int "Maximum screen width"
	range 256 16384
	default BUSYBOX_DEFAULT_FEATURE_VI_MAX_LEN
	depends on BUSYBOX_CONFIG_VI
	help
	Contrary to what you may think, this is not eating much.
	Make it smaller than 4k only if you are very limited on memory.

config BUSYBOX_CONFIG_FEATURE_VI_8BIT
	bool "Allow to display 8-bit chars (otherwise shows dots)"
	default BUSYBOX_DEFAULT_FEATURE_VI_8BIT
	depends on BUSYBOX_CONFIG_VI
	help
	If your terminal can display characters with high bit set,
	you may want to enable this. Note: vi is not Unicode-capable.
	If your terminal combines several 8-bit bytes into one character
	(as in Unicode mode), this will not work properly.

config BUSYBOX_CONFIG_FEATURE_VI_COLON
	bool "Enable \":\" colon commands (no \"ex\" mode)"
	default BUSYBOX_DEFAULT_FEATURE_VI_COLON
	depends on BUSYBOX_CONFIG_VI
	help
	Enable a limited set of colon commands. This does not
	provide an "ex" mode.

config BUSYBOX_CONFIG_FEATURE_VI_YANKMARK
	bool "Enable yank/put commands and mark cmds"
	default BUSYBOX_DEFAULT_FEATURE_VI_YANKMARK
	depends on BUSYBOX_CONFIG_VI
	help
	This enables you to use yank and put, as well as mark.

config BUSYBOX_CONFIG_FEATURE_VI_SEARCH
	bool "Enable search and replace cmds"
	default BUSYBOX_DEFAULT_FEATURE_VI_SEARCH
	depends on BUSYBOX_CONFIG_VI
	help
	Select this if you wish to be able to do search and replace.

config BUSYBOX_CONFIG_FEATURE_VI_REGEX_SEARCH
	bool "Enable regex in search and replace"
	default BUSYBOX_DEFAULT_FEATURE_VI_REGEX_SEARCH
	depends on BUSYBOX_CONFIG_FEATURE_VI_SEARCH
	depends on USE_GLIBC
	help
	Use extended regex search.

config BUSYBOX_CONFIG_FEATURE_VI_USE_SIGNALS
	bool "Catch signals"
	default BUSYBOX_DEFAULT_FEATURE_VI_USE_SIGNALS
	depends on BUSYBOX_CONFIG_VI
	help
	Selecting this option will make vi signal aware. This will support
	SIGWINCH to deal with Window Changes, catch ^Z and ^C and alarms.

config BUSYBOX_CONFIG_FEATURE_VI_DOT_CMD
	bool "Remember previous cmd and \".\" cmd"
	default BUSYBOX_DEFAULT_FEATURE_VI_DOT_CMD
	depends on BUSYBOX_CONFIG_VI
	help
	Make vi remember the last command and be able to repeat it.

config BUSYBOX_CONFIG_FEATURE_VI_READONLY
	bool "Enable -R option and \"view\" mode"
	default BUSYBOX_DEFAULT_FEATURE_VI_READONLY
	depends on BUSYBOX_CONFIG_VI
	help
	Enable the read-only command line option, which allows the user to
	open a file in read-only mode.

config BUSYBOX_CONFIG_FEATURE_VI_SETOPTS
	bool "Enable settable options, ai ic showmatch"
	default BUSYBOX_DEFAULT_FEATURE_VI_SETOPTS
	depends on BUSYBOX_CONFIG_VI
	help
	Enable the editor to set some (ai, ic, showmatch) options.

config BUSYBOX_CONFIG_FEATURE_VI_SET
	bool "Support :set"
	default BUSYBOX_DEFAULT_FEATURE_VI_SET
	depends on BUSYBOX_CONFIG_VI

config BUSYBOX_CONFIG_FEATURE_VI_WIN_RESIZE
	bool "Handle window resize"
	default BUSYBOX_DEFAULT_FEATURE_VI_WIN_RESIZE
	depends on BUSYBOX_CONFIG_VI
	help
	Behave nicely with terminals that get resized.

config BUSYBOX_CONFIG_FEATURE_VI_ASK_TERMINAL
	bool "Use 'tell me cursor position' ESC sequence to measure window"
	default BUSYBOX_DEFAULT_FEATURE_VI_ASK_TERMINAL
	depends on BUSYBOX_CONFIG_VI
	help
	If terminal size can't be retrieved and $LINES/$COLUMNS are not set,
	this option makes vi perform a last-ditch effort to find it:
	position cursor to 999,999 and ask terminal to report real
	cursor position using "ESC [ 6 n" escape sequence, then read stdin.
	This is not clean but helps a lot on serial lines and such.

config BUSYBOX_CONFIG_FEATURE_VI_UNDO
	bool "Support undo command \"u\""
	default BUSYBOX_DEFAULT_FEATURE_VI_UNDO
	depends on BUSYBOX_CONFIG_VI
	help
	Support the 'u' command to undo insertion, deletion, and replacement
	of text.

config BUSYBOX_CONFIG_FEATURE_VI_UNDO_QUEUE
	bool "Enable undo operation queuing"
	default BUSYBOX_DEFAULT_FEATURE_VI_UNDO_QUEUE
	depends on BUSYBOX_CONFIG_FEATURE_VI_UNDO
	help
	The vi undo functions can use an intermediate queue to greatly lower
	malloc() calls and overhead. When the maximum size of this queue is
	reached, the contents of the queue are committed to the undo stack.
	This increases the size of the undo code and allows some undo
	operations (especially un-typing/backspacing) to be far more useful.

config BUSYBOX_CONFIG_FEATURE_VI_UNDO_QUEUE_MAX
	int "Maximum undo character queue size"
	default BUSYBOX_DEFAULT_FEATURE_VI_UNDO_QUEUE_MAX
	range 32 65536
	depends on BUSYBOX_CONFIG_FEATURE_VI_UNDO_QUEUE
	help
	This option sets the number of bytes used at runtime for the queue.
	Smaller values will create more undo objects and reduce the amount
	of typed or backspaced characters that are grouped into one undo
	operation; larger values increase the potential size of each undo
	and will generally malloc() larger objects and less frequently.
	Unless you want more (or less) frequent "undo points" while typing,
	you should probably leave this unchanged.

config BUSYBOX_CONFIG_FEATURE_ALLOW_EXEC
	bool "Allow vi and awk to execute shell commands"
	default BUSYBOX_DEFAULT_FEATURE_ALLOW_EXEC
	depends on BUSYBOX_CONFIG_VI || BUSYBOX_CONFIG_AWK
	help
	Enables vi and awk features which allow user to execute
	shell commands (using system() C call).

endmenu
