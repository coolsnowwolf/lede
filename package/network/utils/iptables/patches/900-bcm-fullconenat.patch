From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: YourName <you@example.com>
Date: Fri, 17 May 2025 10:00:00 +0800
Subject: [PATCH] xt_NAT: add --mode option for fullcone/symmetric NAT

Signed-off-by: YourName <you@example.com>
---
 extensions/libxt_NAT.c | 23 ++++++++++++++++++++++-
 1 file changed, 22 insertions(+), 1 deletions(-)

diff --git a/extensions/libxt_NAT.c b/extensions/libxt_NAT.c
index 2a63439..e8f0b1f 100644
--- a/extensions/libxt_NAT.c
+++ b/extensions/libxt_NAT.c
@@ -40,6 +40,7 @@ enum {
 	O_TO_PORTS,
 	O_RANDOM,
 	O_RANDOM_FULLY,
+	O_MODE,
 	O_PERSISTENT,
 };
 
@@ -61,7 +62,9 @@ static void MASQUERADE_help(void)
 " --random\n"
 "				Randomize source port.\n"
 " --random-fully\n"
-"				Fully randomize source port.\n");
+"				Fully randomize source port.\n"
+" --mode <fullcone|symmetric>\n"
+"				NAT mode (default: symmetric).\n");
 }
 
 static void DNAT_help(void)
@@ -104,6 +107,7 @@ static const struct xt_option_entry MASQ
 	{.name = "to-ports", .id = O_TO_PORTS, .type = XTTYPE_STRING},
 	{.name = "random", .id = O_RANDOM, .type = XTTYPE_NONE},
 	{.name = "random-fully", .id = O_RANDOM_FULLY, .type = XTTYPE_NONE},
+	{.name = "mode", .id = O_MODE, .type = XTTYPE_STRING},
 	XTOPT_TABLEEND,
 };
 
@@ -291,6 +295,8 @@ static void NAT_parse(struct xt_option_c
 
 	__NAT_parse(cb, entry->ip.proto, &range, AF_INET);
 
+	mr->range->min_ip = 0; /* default: symmetric */
+
 	switch (cb->entry->id) {
 	case O_TO_DEST:
 	case O_TO_SRC:
@@ -306,6 +312,15 @@ static void NAT_parse(struct xt_option_c
 	case O_RANDOM_FULLY:
 		mr->range->flags |= range.flags;
 		break;
+	case O_MODE:
+		if (strcasecmp(cb->arg, "fullcone") == 0)
+			mr->range->min_ip = 1;
+		else if (strcasecmp(cb->arg, "symmetric") == 0)
+			mr->range->min_ip = 0;
+		else
+			xtables_error(PARAMETER_PROBLEM,
+			      "Unknown mode %s", cb->arg);
+		break;
 	}
 }
 
@@ -409,6 +424,8 @@ static void __NAT_print(const struct nf_
 		printf(" %srandom", flag_pfx);
 	if (r->flags & NF_NAT_RANGE_PROTO_RANDOM_FULLY)
 		printf(" %srandom-fully", flag_pfx);
+	if (r->min_addr.ip == 1)
+		printf(" %smode fullcone", flag_pfx);
 	if (r->flags & NF_NAT_RANGE_PERSISTENT)
 		printf(" %spersistent", flag_pfx);
 }
@@ -435,6 +452,10 @@ __NAT_xlate(struct xt_xlate *xl, const s
 		xt_xlate_add(xl, "%sfully-random", sep);
 		sep = ",";
 	}
+	if (r->min_addr.ip == 1) {
+		xt_xlate_add(xl, "%smode fullcone", sep);
+		sep = ",";
+	}
 	if (r->flags & NF_NAT_RANGE_PERSISTENT) {
 		xt_xlate_add(xl, "%spersistent", sep);
 		sep = ",";
