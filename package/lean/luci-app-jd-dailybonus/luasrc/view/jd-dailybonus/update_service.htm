<%+cbi/valueheader%>
<script src="https://cdn.jsdelivr.net/npm/qrcode_js@1.0.0/qrcode.min.js"></script>
<style>
    .modals-bg {
        position: fixed;
        z-index: 999;
        width: 100%;
        height: 100%;
        left: 0;
        top: 0;
        background: rgba(255, 255, 255, 0.8);
        transition: all 0.3s ease-in-out;
        transform: scale(1);
    }

    .modals {
        position: fixed;
        z-index: 100;
        width: 60%;
        height: 500px;
        background: #172b4d;
        left: 20%;
        top: 15%;
        color: #fff;
        border-radius: 10px;
        padding: 20px;

        box-sizing: border-box;
        -moz-box-sizing: border-box;
        /* Firefox */
        -webkit-box-sizing: border-box;
        /* Safari */
        transition: all 0.3s ease-in-out;
        transform: scale(1);
    }
    .modals-bg.hide {
        visibility: hidden;
        opacity: 0;
    }

    .modals.hide {
        visibility: hidden;
        opacity: 0;
        transform: scale(0.5);
    }


    .modals h2 {
        color: #fff;
        background: transparent;
        padding: 0 !important;
        margin: 0;
    }

    .modals h3 {
        font-size: 14px;
        color: #f5365c !important;
        background: transparent;
        padding: 0 0 0.5em 0;
    }

    #log_content3 {
        border: 0;
        width: 99%;
        height: calc(100% - 4rem);
        font-family: 'Lucida Console';
        font-size: 11px;
        background: transparent;
        color: #FFFFFF;
        outline: none;
        padding-left: 3px;
        padding-right: 22px;
        overflow: hidden;
        resize: none;
    }

    .cbi-value-version {
        word-wrap: break-word;
        font-size: 0.875rem;
        line-height: 1.6;
        color: #5e72e4;
        font-weight: bold;
        padding: .7rem;
        padding-left: 0;
        width: 23rem;
        float: left;
        text-align: left;
        display: table-cell;
    }
    
    #qrcontainer {
        position: fixed;
        width: 100%;
        height: 100%;
        left: 0;
        top: 0;
        z-index: 5000;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(255, 255, 255, .8);
        text-align: center;
        transition: all 0.3s;
    }
    #qrcontainer.hidden{
        opacity: 0;
        visibility: hidden;
    }

    #qrcontainer .qframe {
        background-color: #ffffff;
        padding: 1rem;
        border-radius: 0.5rem;
        border: #6D8A88 1px solid;
        -webkit-box-shadow: 0px 0px 7px 3px rgba(0, 0, 0, 0.2);
        box-shadow: 0px 0px 7px 3px rgba(0, 0, 0, 0.2);
        position: relative;
    }
    #qrcontainer .qframe #refresh_qrcode{
        width: 256px;
        height: 256px;
        position: absolute;
        background-color: rgba(0, 0, 0, 0.5);
        left: 1rem;
        top: 1rem;
        color: #ffffff;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    #qrcontainer .qframe #refresh_qrcode.hidden{
        opacity: 0;
        visibility: hidden;
    }
    #qrcontainer .qframe #refresh_qrcode h3{
        font-weight: normal;
    }
    #qrcontainer .qframe #refresh_qrcode .refresh{
        display: block;
        background: #e4393c;
        width: 80px;
        height: 30px;
        margin: 0 auto;
        line-height: 30px;
        opacity: 1;
        z-index: 19;
        color: #fbfbfb;
        text-decoration: none;
        cursor: pointer;
    }
    #qrcontainer .qframe .info {
        padding: 1rem 0 0 0;
    }

    @media screen and (max-width: 1024px) {
        .modals {
            position: fixed;
            z-index: 100;
            width: 80%;
            height: 500px;
            background: #172b4d;
            left: 10%;
            top: 15%;
            color: #fff;
            border-radius: 10px;
            padding: 20px;
        }
    }

    @media screen and (max-width: 700px) {
        .modals-bg {
            position: fixed;
            z-index: 100000;

        }

        .modals {
            width: 100%;
            height: 100%;
            left: 0;
            top: 0;
        }
    }

</style>
<label class="cbi-value-title"><%= translate("执行") %></label>
<div class="cbi-value-field">
    <input class="cbi-button cbi-button-reload" id="update_service" type="button" size="0"
        value="<%= translate("保存Cookie,并马上进行签到") %>">
</div>

<%+cbi/valuefooter%>

<%+cbi/valueheader%>
<label class="cbi-value-title"><%= translate("更新脚本") %></label>
<div class="cbi-value-field">
    <input class="cbi-button cbi-button-reload" id="update_script" type="button" size="0" onclick="check_version()" data-version="<%= self.version %>"
        value="<%= translate("手动检查脚本更新，当前版本：v")..self.version %>">
</div>
<%+cbi/valuefooter%>

<div id="qrcontainer" class="hidden">
    <div class="qframe">
        <div id="refresh_qrcode" class="hidden">
            <div>
                <h3>二维码已失效</h3>
                <div class="refresh" onclick="get_code()">刷新</div>
            </div>
        </div>
        <div id="qrcode"></div>
        <div class="info">请使用京东手机APP扫码</div>
    </div>
</div>

<script type="text/javascript">

    const SAVE_URL = '<%=luci.dispatcher.build_url("admin", "services", "jd-dailybonus","run")%>';
    const CHECK_URL = '<%=luci.dispatcher.build_url("admin", "services", "jd-dailybonus","check_update")%>';
    const QRCODE_URL = '<%=luci.dispatcher.build_url("admin", "services", "jd-dailybonus","qrcode")%>';
    const CHECK_LOGIN_URL = '<%=luci.dispatcher.build_url("admin", "services", "jd-dailybonus","check_login")%>';
    const UPDATE_URL = '<%=luci.dispatcher.build_url("admin", "services", "jd-dailybonus","update")%>';
    const LOG_URL = '<%=luci.dispatcher.build_url("admin", "services", "jd-dailybonus","realtime_log")%>';
    const CHECKING_TEXT = '<%= translate("正在检查是否存在新的版本 ...") %>';
    const UPDATING_TEXT = '<%= translate("正在更新脚本，请稍候 ...") %>';
    const NEW_VERSION = '<%= translate("当前已是最新版本：") %>';

    var noChange = 0;
    var ckid = 0;
    var modal = `<div class="modals-bg hide">
                    <div class="modals hide">
                        <h2>签到信息</h2>
                        <h3 style="margin-left:0;">服务正在执行中，请勿刷新！</h3>
                        <textarea cols="63" rows="28" wrap="on" readonly="readonly" id="log_content3" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"></textarea>
                    </div>
                </div>`;

    //显示并开始刷新订阅
    function update_service() {
        document.body.insertAdjacentHTML('beforeend', modal);
        document.getElementsByClassName("modals-bg")[0].classList.remove("hide");
        setTimeout(() => {
            document.getElementsByClassName("modals")[0].classList.remove("hide");
        }, 100);
        setTimeout(get_realtime_log, 500);
    }

    function el(dom_el){
        let prefix = document.getElementById("cbi-jd-dailybonus-global").getElementsByClassName("cbi-section-node")[0].id.split("-").pop();
        return document.querySelector(`[name='cbid.jd-dailybonus.${prefix}.${dom_el}']`);
    }
    //保存订阅按钮
    document.getElementById("update_service").onclick = () => {
        if(el("cookie").value == ""){
            alert("请至少填写cookie1");
            return false;
        }
        let json = {
            auto_update: el("auto_update").checked?"1":"0",
            auto_update_time: el("auto_update").checked?el("auto_update_time").value:"0",
            auto_run: el("auto_run").checked?"1":"0",
            auto_run_time_h: el("auto_run").checked?el("auto_run_time_h").value:"0",
            auto_run_time_m: el("auto_run").checked?el("auto_run_time_m").value:"0",
            cookie: el("cookie").value,
            cookie2: el("cookie2").value,
            stop: el("stop").value,
            out: el("out").value,
            serverchan:  el("serverchan").value,
            tg_token:  el("tg_token").value,
            tg_userid:  el("tg_userid").value,
            serverurl:  el("serverurl").value,
            remote_url:  el("remote_url").value
        }
        XHR.get(SAVE_URL, json, (x, d) => {
            if (d.error == 0) {
                update_service();
            } else {
                alert("请填写cookies");
            }
        });
        return false;
    }

    //获取实时日志
    function get_realtime_log() {
        XHR.poll(1, LOG_URL, null, x => {
            let retArea = document.getElementById("log_content3");
            if (x.response.search(" 秒") != -1) {
                noChange++;
            }
            if (noChange > 5) {
                location.reload();
            }
            retArea.value = x.response;
            retArea.scrollTop = retArea.scrollHeight;
        });
    }

    //更新脚本
    function check_version() {
        let btn = document.getElementById("update_script");
        let version = btn.getAttribute("data-version");
        btn.disabled = true;
        btn.value = CHECKING_TEXT;
        XHR.get(CHECK_URL, null, (x,d) => {
            if (d.new_version == 501){
                btn.disabled = false;
                btn.value = "无法获取新版本，请重试！";
            }else if (d.new_version > version) {
                btn.disabled = true;
                btn.value = `${UPDATING_TEXT} v${d.new_version}`;

                XHR.get(UPDATE_URL, {version: version}, (x, r) => {
                    if (r.error == 0) {
                        btn.value = `${NEW_VERSION} v${d.new_version}`;
                        btn.setAttribute("data-version", d.new_version);
                    } else {
                        btn.disabled = false;
                        alert("更新错误请重试");
                    }
                });
                
            }else{
                btn.value = `${NEW_VERSION} v${d.new_version}`;
            }
        });
        return false
    }

    //初始化二维码
    (function(){
        let cookieBtn = Array.prototype.slice.call(document.getElementsByClassName("cookie-button"));
        try {
            qrcode = new QRCode(document.getElementById("qrcode"),
                    {
                        text: "sample",
                        correctLevel: QRCode.CorrectLevel.L
                    });
            cookieBtn.forEach(e => {
                e.onclick = () => {
                    ckid = e.getAttribute("data-rel");
                    get_code();
                    return false;
                }
            });
        } catch (error) {
            alert("网络离线状态无法使用二维码获取Cookie，请刷新后重试！")
            cookieBtn.forEach(e => {
                e.disabled = true;
            });
        }
    }());
    
    //获取二维码
    function get_code(){
        XHR.get(QRCODE_URL, null, (x,d) => {
            document.getElementById("qrcontainer").classList.remove("hidden");
            document.getElementById("refresh_qrcode").classList.add("hidden");
            qrcode.clear();
            qrcode.makeCode(d.qrcode_url);
            checkLogin(d.check_url);
        });
        return false;
    }
        
    function checkLogin(check_url){
        let cname = ckid == 1?"cookie":"cookie2"
        XHR.poll(3, CHECK_LOGIN_URL, { check_url: check_url, id: cname }, (x, d) => {
            if (d.error == 0) {
                XHR.halt();
                XHR._q = [];
                document.getElementById("qrcontainer").classList.add("hidden");
                document.getElementById("refresh_qrcode").classList.add("hidden");
                let prefix_array = document.getElementsByClassName("cbi-input-text")[0].getAttribute("id").split(".")
                prefix_array.pop()
                let id = `${prefix_array.join(".")}.${cname}`;
                document.getElementById(id).value = d.cookie
            } else if (d.error == 21 || d.error == 261) {
                XHR.halt();
                XHR._q = [];
                document.getElementById("refresh_qrcode").classList.remove("hidden");
            }
        });
    }
</script>