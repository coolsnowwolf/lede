#!/bin/sh /etc/rc.common
# Copyright (C) 2015-2016 OpenWrt.org

START=99
USE_PROCD=1

append_num() {
	local cfg="$1"
	local file="$2"
	local var="$3"
	local opt="$4"
	local def="$5"
	local val

	config_get val "$cfg" "$var"
	[ -n "$val" -o -n "$def" ] && echo -e "\t$opt = ${val:-$def};" >> $file
}
append_str() {
	local cfg="$1"
	local file="$2"
	local var="$3"
	local opt="$4"
	local def="$5"
	local val

	config_get val "$cfg" "$var"
	[ -n "$val" -o -n "$def" ] && echo -e "\t$opt = \"${val:-$def}\";" >> $file
}

start_instance() {
	local cfg=$1
	local conf_custom conf_file aux

	config_get_bool aux "$cfg" 'enabled' '0'
	[ "$aux" = 0 ] && return 1

	config_get_bool conf_custom "$cfg" 'conf_custom' '0'
	config_get conf_file "$cfg" "conf_file"
	if [ $conf_custom -ne 1 ] && [ ! -n "$conf_file" ]; then
		mkdir -p /var/etc
		conf_file="/var/etc/shairport-sync-${cfg}.conf"

		echo -e "// Automatically generated from UCI config\n" > $conf_file

		# General
		echo -e "general =" >> $conf_file
		echo -e "{" >> $conf_file
		append_str "$cfg" "$conf_file" name "name"
		append_str "$cfg" "$conf_file" password "password"
		append_str "$cfg" "$conf_file" interpolation "interpolation"
		append_str "$cfg" "$conf_file" output_backend "output_backend"
		append_str "$cfg" "$conf_file" mdns_backend "mdns_backend"
		append_num "$cfg" "$conf_file" port "port" "5050"
		append_num "$cfg" "$conf_file" udp_port_base "udp_port_base"
		append_num "$cfg" "$conf_file" udp_port_range "udp_port_range"
		append_str "$cfg" "$conf_file" statistics "statistics"
		append_num "$cfg" "$conf_file" drift "drift"
		append_num "$cfg" "$conf_file" resync_threshold "resync_threshold"
		append_num "$cfg" "$conf_file" log_verbosity "log_verbosity"
		append_str "$cfg" "$conf_file" ignore_volume_control "ignore_volume_control"
		append_num "$cfg" "$conf_file" volume_range_db "volume_range_db"
		append_str "$cfg" "$conf_file" regtype "regtype"
		append_str "$cfg" "$conf_file" playback_mode "playback_mode"
		append_num "$cfg" "$conf_file" alsa_buffer_length "audio_backend_buffer_desired_length"
		append_num "$cfg" "$conf_file" alsa_latency_offset "audio_backend_latency_offset_in_seconds"
		echo -e "};\n" >> $conf_file

		# Metadata
		echo -e "metadata =" >> $conf_file
		echo -e "{" >> $conf_file
		append_str "$cfg" "$conf_file" metadata_enabled "enabled"
		append_str "$cfg" "$conf_file" metadata_cover_art "include_cover_art"
		append_str "$cfg" "$conf_file" metadata_pipe_name "pipe_name"
		append_num "$cfg" "$conf_file" metadata_pipe_timeout "pipe_timeout"
		append_str "$cfg" "$conf_file" metadata_socket_address "socket_address"
		append_num "$cfg" "$conf_file" metadata_socket_port "socket_port"
		append_num "$cfg" "$conf_file" metadata_socket_msglength "socket_msglength"
		echo -e "};\n" >> $conf_file

		# Session control
		echo -e "sessioncontrol =" >> $conf_file
		echo -e "{" >> $conf_file
		append_str "$cfg" "$conf_file" sesctl_run_before_play_begins "run_this_before_play_begins"
		append_str "$cfg" "$conf_file" sesctl_run_after_play_ends "run_this_after_play_ends"
		append_str "$cfg" "$conf_file" sesctl_wait_for_completion "wait_for_completion"
		append_str "$cfg" "$conf_file" sesctl_session_interruption "allow_session_interruption"
		append_num "$cfg" "$conf_file" sesctl_session_timeout "session_timeout"
		echo -e "};\n" >> $conf_file

		# Alsa audio back end
		echo -e "alsa =" >> $conf_file
		echo -e "{" >> $conf_file
		append_str "$cfg" "$conf_file" alsa_output_device "output_device"
		append_str "$cfg" "$conf_file" alsa_mixer_control_name "mixer_control_name"
		append_str "$cfg" "$conf_file" alsa_mixer_device "mixer_device"
		local alsa_output_rate_val
		config_get alsa_output_rate_val "$cfg" "alsa_output_rate"
		[ $alsa_output_rate_val != "auto" ] && append_num "$cfg" "$conf_file" alsa_output_rate "output_rate" "44100"
		append_str "$cfg" "$conf_file" alsa_disable_synchronization "disable_synchronization"
		append_num "$cfg" "$conf_file" alsa_period_size "period_size"
		append_num "$cfg" "$conf_file" alsa_buffer_size "buffer_size"
		echo -e "};\n" >> $conf_file

		# Pipe audio back end
		echo -e "pipe =" >> $conf_file
		echo -e "{" >> $conf_file
		append_str "$cfg" "$conf_file" pipe_name "name"
		echo -e "};\n" >> $conf_file

	fi

	procd_open_instance

	procd_set_param command /usr/bin/shairport-sync
	procd_append_param command -c $conf_file

	config_get_bool aux "$cfg" 'respawn' '0'
	[ "$aux" = 1 ] && procd_set_param respawn

	procd_close_instance
}

service_triggers() {
	procd_add_reload_trigger "shairport-sync"
}

reload_service() {
	stop
	start
}

start_service() {
	config_load shairport-sync
	config_foreach start_instance shairport-sync
}

boot() {
	amixer set Master unmute
	amixer set Master 100%
	amixer set PCM 100%
	start
}
