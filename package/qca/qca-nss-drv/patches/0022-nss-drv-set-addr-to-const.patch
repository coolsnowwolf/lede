--- a/exports/nss_bridge.h
+++ b/exports/nss_bridge.h
@@ -273,7 +273,7 @@ nss_tx_status_t nss_bridge_tx_set_mtu_ms
  * @return
  * Status of the Tx operation.
  */
-nss_tx_status_t nss_bridge_tx_set_mac_addr_msg(uint32_t bridge_if_num, uint8_t *addr);
+nss_tx_status_t nss_bridge_tx_set_mac_addr_msg(uint32_t bridge_if_num, const uint8_t *addr);
 
 /**
  * nss_bridge_tx_join_msg
--- a/exports/nss_vlan.h
+++ b/exports/nss_vlan.h
@@ -210,7 +210,7 @@ nss_tx_status_t nss_vlan_tx_set_mtu_msg(
  * @return
  * Status of the Tx operation.
  */
-nss_tx_status_t nss_vlan_tx_set_mac_addr_msg(uint32_t vlan_if_num, uint8_t *addr);
+nss_tx_status_t nss_vlan_tx_set_mac_addr_msg(uint32_t vlan_if_num, const uint8_t *addr);
 
 /**
  * nss_vlan_tx_vsi_attach_msg
--- a/exports/nss_wifi_vdev.h
+++ b/exports/nss_wifi_vdev.h
@@ -1404,7 +1404,7 @@ nss_tx_status_t nss_wifi_vdev_base_set_n
  * @return
  * Status of the Tx operation.
  */
-nss_tx_status_t nss_wifi_vdev_set_peer_next_hop(struct nss_ctx_instance *nss_ctx, uint32_t nss_if, uint8_t *addr, uint32_t next_hop_if);
+nss_tx_status_t nss_wifi_vdev_set_peer_next_hop(struct nss_ctx_instance *nss_ctx, uint32_t nss_if, const uint8_t *addr, uint32_t next_hop_if);
 
 /*
  * nss_wifi_vdev_set_dp_type
--- a/nss_bridge.c
+++ b/nss_bridge.c
@@ -304,7 +304,7 @@ EXPORT_SYMBOL(nss_bridge_tx_set_mtu_msg)
  * nss_bridge_tx_set_mac_addr_msg
  *	API to send change mac addr message to NSS FW
  */
-nss_tx_status_t nss_bridge_tx_set_mac_addr_msg(uint32_t bridge_if_num, uint8_t *addr)
+nss_tx_status_t nss_bridge_tx_set_mac_addr_msg(uint32_t bridge_if_num, const uint8_t *addr)
 {
 	struct nss_ctx_instance *nss_ctx = nss_bridge_get_context();
 	struct nss_bridge_msg nbm;
--- a/nss_phys_if.c
+++ b/nss_phys_if.c
@@ -402,7 +402,7 @@ nss_tx_status_t nss_phys_if_link_state(s
  * nss_phys_if_mac_addr()
  *	Send a MAC address to physical interface
  */
-nss_tx_status_t nss_phys_if_mac_addr(struct nss_ctx_instance *nss_ctx, uint8_t *addr, uint32_t if_num)
+nss_tx_status_t nss_phys_if_mac_addr(struct nss_ctx_instance *nss_ctx, const uint8_t *addr, uint32_t if_num)
 {
 	struct nss_phys_if_msg nim;
 	struct nss_if_mac_address_set *nmas;
--- a/nss_phys_if.h
+++ b/nss_phys_if.h
@@ -284,7 +284,7 @@ nss_tx_status_t nss_phys_if_link_state(s
  *
  * @return nss_tx_status_t Tx status
  */
-nss_tx_status_t nss_phys_if_mac_addr(struct nss_ctx_instance *nss_ctx, uint8_t *addr, uint32_t if_num);
+nss_tx_status_t nss_phys_if_mac_addr(struct nss_ctx_instance *nss_ctx, const uint8_t *addr, uint32_t if_num);
 
 /**
  * @brief Send MTU change notification to NSS
--- a/nss_vlan.c
+++ b/nss_vlan.c
@@ -246,7 +246,7 @@ EXPORT_SYMBOL(nss_vlan_tx_set_mtu_msg);
  * nss_vlan_tx_set_mac_addr_msg
  *	API to send change mac addr message to NSS FW
  */
-nss_tx_status_t nss_vlan_tx_set_mac_addr_msg(uint32_t vlan_if_num, uint8_t *addr)
+nss_tx_status_t nss_vlan_tx_set_mac_addr_msg(uint32_t vlan_if_num, const uint8_t *addr)
 {
 	struct nss_ctx_instance *nss_ctx = nss_vlan_get_context();
 	struct nss_vlan_msg nvm;
--- a/nss_wifi_vdev.c
+++ b/nss_wifi_vdev.c
@@ -274,7 +274,7 @@ EXPORT_SYMBOL(nss_wifi_vdev_base_set_nex
 /*
  * nss_wifi_vdev_set_peer_next_hop()
  */
-nss_tx_status_t nss_wifi_vdev_set_peer_next_hop(struct nss_ctx_instance *ctx, uint32_t nss_if, uint8_t *addr, uint32_t next_hop_if)
+nss_tx_status_t nss_wifi_vdev_set_peer_next_hop(struct nss_ctx_instance *ctx, uint32_t nss_if, const uint8_t *addr, uint32_t next_hop_if)
 {
 	nss_tx_status_t status;
 	struct nss_wifi_vdev_msg *wifivdevmsg = kzalloc(sizeof(struct nss_wifi_vdev_msg), GFP_KERNEL);
