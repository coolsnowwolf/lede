--- a/v1.0/src/nss_crypto_dtsi.c
+++ b/v1.0/src/nss_crypto_dtsi.c
@@ -346,7 +346,7 @@ static int nss_crypto_probe(struct platf
  * nss_crypto_remove()
  *	remove the crypto engine and deregister everything
  */
-static int nss_crypto_remove(struct platform_device *pdev)
+static void nss_crypto_remove(struct platform_device *pdev)
 {
 	struct nss_crypto_ctrl_eng *e_ctrl;
 	struct nss_crypto_ctrl *ctrl;
@@ -361,7 +361,6 @@ static int nss_crypto_remove(struct plat
 		kfree(ctrl->clocks);
 	}
 
-	return 0;
 };
 
 static struct of_device_id nss_crypto_dt_ids[] = {
@@ -375,7 +374,11 @@ MODULE_DEVICE_TABLE(of, nss_crypto_dt_id
  */
 static struct platform_driver nss_crypto_drv = {
 	.probe  	= nss_crypto_probe,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
+	.remove_new 	= nss_crypto_remove,
+#else
 	.remove 	= nss_crypto_remove,
+#endif
 	.driver 	= {
 		.owner	= THIS_MODULE,
 		.name	= "nss-crypto",
--- a/v2.0/src/hal/ipq60xx/nss_crypto_eip197.h
+++ b/v2.0/src/hal/ipq60xx/nss_crypto_eip197.h
@@ -19,7 +19,9 @@
 #ifndef __NSS_CRYPTO_EIP197_H
 #define __NSS_CRYPTO_EIP197_H
 
+#include <linux/of_platform.h>
 #include <linux/types.h>
+#include <linux/fs.h>
 
 /*
  * Common configuration data for command and result
--- a/v2.0/src/hal/ipq60xx/nss_crypto_hw.c
+++ b/v2.0/src/hal/ipq60xx/nss_crypto_hw.c
@@ -15,8 +15,10 @@
  * PERFORMANCE OF THIS SOFTWARE.
  */
 
+#include <linux/of.h>
 #include <linux/of_platform.h>
 #include "nss_crypto_eip197.h"
+#include "nss_crypto_hw.h"
 
 /*
  * nss_crypto_hw_deinit()
--- a/v2.0/src/hal/ipq807x/nss_crypto_eip197.h
+++ b/v2.0/src/hal/ipq807x/nss_crypto_eip197.h
@@ -20,6 +20,8 @@
 #define __NSS_CRYPTO_EIP197_H
 
 #include <linux/types.h>
+#include <linux/fs.h>
+#include <linux/of_platform.h>
 
 /*
  * Common configuration data for command and result
--- a/v2.0/src/hal/ipq807x/nss_crypto_hw.c
+++ b/v2.0/src/hal/ipq807x/nss_crypto_hw.c
@@ -15,8 +15,10 @@
  * PERFORMANCE OF THIS SOFTWARE.
  */
 
+#include <linux/of.h>
 #include <linux/of_platform.h>
 #include "nss_crypto_eip197.h"
+#include "nss_crypto_hw.h"
 
 /*
  * nss_crypto_hw_deinit()
@@ -27,7 +29,6 @@ void nss_crypto_hw_deinit(struct platfor
 	/*
 	 * TODO: Add support for putting HW into reset
 	 */
-	return;
 }
 
 /*
--- a/v2.0/src/nss_crypto_ctrl.c
+++ b/v2.0/src/nss_crypto_ctrl.c
@@ -1575,11 +1575,10 @@ static int nss_crypto_device_probe(struc
  * nss_crypto_device_remove()
  *	remove crypto device and deregister everything
  */
-static int nss_crypto_device_remove(struct platform_device *pdev)
+static void nss_crypto_device_remove(struct platform_device *pdev)
 {
 	nss_crypto_hw_deinit(pdev);
 	nss_crypto_node_free(platform_get_drvdata(pdev));
-	return 0;
 };
 
 /*
@@ -1588,7 +1587,11 @@ static int nss_crypto_device_remove(stru
  */
 static struct platform_driver nss_crypto_device = {
 	.probe		= nss_crypto_device_probe,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
+	.remove_new		= nss_crypto_device_remove,
+#else
 	.remove		= nss_crypto_device_remove,
+#endif
 	.driver		= {
 		.owner	= THIS_MODULE,
 		.name	= "nss-crypto-device",
@@ -1656,7 +1659,7 @@ static int nss_crypto_probe(struct platf
  * nss_crypto_remove()
  *	remove the crypto driver
  */
-static int nss_crypto_remove(struct platform_device *pdev)
+static void nss_crypto_remove(struct platform_device *pdev)
 {
 	struct nss_crypto_ctrl *ctrl = platform_get_drvdata(pdev);
 
@@ -1670,7 +1673,6 @@ static int nss_crypto_remove(struct plat
 	 * Clear the active state of driver
 	 */
 	ctrl->active = false;
-	return 0;
 }
 
 /*
@@ -1679,7 +1681,11 @@ static int nss_crypto_remove(struct plat
  */
 static struct platform_driver nss_crypto_drv = {
 	.probe		= nss_crypto_probe,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(6, 11, 0)
+	.remove_new		= nss_crypto_remove,
+#else
 	.remove		= nss_crypto_remove,
+#endif
 	.driver		= {
 		.owner	= THIS_MODULE,
 		.name	= "nss-crypto",
--- a/v2.0/tool/nss_crypto_bench.c
+++ b/v2.0/tool/nss_crypto_bench.c
@@ -980,7 +980,7 @@ int __init crypto_bench_init(void)
 
 	ctx->attach = crypto_bench_attach;
 	ctx->detach = crypto_bench_detach;
-	strlcpy(ctx->name, "bench", sizeof(ctx->name));
+	strscpy(ctx->name, "bench", sizeof(ctx->name));
 	ctx->hdr_pool_sz = 1024;
 	ctx->default_hdr_sz = 512;
 	ctx->timeout_ticks = 1;
