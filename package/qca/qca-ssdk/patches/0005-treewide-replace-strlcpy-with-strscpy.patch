From 1a220390b16c7688004bff5e2e17b54ed36d6930 Mon Sep 17 00:00:00 2001
From: Robert Marko <robimarko@gmail.com>
Date: Sat, 10 May 2025 13:40:56 +0200
Subject: [PATCH] treewide: replace strlcpy() with strscpy()

Linux has replaced strlcpy() with strscpy() and removed it since kernel
6.8, so do the same.

Signed-off-by: Robert Marko <robimarko@gmail.com>
---
 app/nathelper/linux/host_helper.c |  4 ++--
 src/init/ssdk_mht_clk.c           |  6 +++---
 src/ref/ref_uci.c                 |  4 ++--
 src/shell_lib/shell_io.c          | 16 ++++++++--------
 4 files changed, 15 insertions(+), 15 deletions(-)

--- a/app/nathelper/linux/host_helper.c
+++ b/app/nathelper/linux/host_helper.c
@@ -1268,7 +1268,7 @@ dev_check(char *in_dev, char *dev_list)
         return 0;
     }
 
-    strlcpy(temp, dev_list, sizeof(temp));
+    strscpy(temp, dev_list, sizeof(temp));
     list = temp;
 
     while ((list_dev = strsep(&list, " ")) != NULL)
@@ -1314,7 +1314,7 @@ static void hnat_add_neigh(struct neighb
 	memset(&msg, 0, sizeof(msg));
 	msg.arp_in.ip = *((uint32_t *)neigh->primary_key);
 	memcpy(msg.arp_in.mac, neigh->ha, ETH_ALEN);
-	strlcpy(msg.arp_in.name, neigh->dev->name, IFNAMSIZ);
+	strscpy(msg.arp_in.name, neigh->dev->name, IFNAMSIZ);
 	msg.arp_in.in = neigh->dev;
 
 	if (neigh->dev->priv_flags & IFF_EBRIDGE) {
--- a/src/init/ssdk_mht_clk.c
+++ b/src/init/ssdk_mht_clk.c
@@ -746,16 +746,16 @@ sw_error_t ssdk_mht_clk_rate_get(a_uint3
 	char clk_id[64] = {0};
 	a_bool_t bypass_en = A_FALSE;
 
-	strlcpy(clk_id, clock_id, sizeof(clk_id));
+	strscpy(clk_id, clock_id, sizeof(clk_id));
 
 	ssdk_mht_port5_uniphy0_clk_src_get(dev_id, &bypass_en);
 	if (bypass_en == A_TRUE) {
 		if (strncasecmp(clock_id, MHT_MAC5_TX_UNIPHY0_CLK,
 					strlen(MHT_MAC5_TX_UNIPHY0_CLK)) == 0)
-			strlcpy(clk_id, MHT_MAC4_RX_CLK, sizeof(clk_id));
+			strscpy(clk_id, MHT_MAC4_RX_CLK, sizeof(clk_id));
 		else if (strncasecmp(clock_id, MHT_MAC5_RX_UNIPHY0_CLK,
 					strlen(MHT_MAC5_RX_UNIPHY0_CLK)) == 0)
-			strlcpy(clk_id, MHT_MAC4_TX_CLK, sizeof(clk_id));
+			strscpy(clk_id, MHT_MAC4_TX_CLK, sizeof(clk_id));
 	}
 
 	clk = ssdk_mht_clk_find(clk_id);
--- a/src/ref/ref_uci.c
+++ b/src/ref/ref_uci.c
@@ -13726,8 +13726,8 @@ static int name_transfer(char *name, cha
         }
 
         if(i<len) {
-		strlcpy(module, name, i+1);
-		strlcpy(cmd, p, COMMAND_NAME_MAX_LEN);
+		strscpy(module, name, i+1);
+		strscpy(cmd, p, COMMAND_NAME_MAX_LEN);
 		return 0;
         }
 
--- a/src/shell_lib/shell_io.c
+++ b/src/shell_lib/shell_io.c
@@ -951,16 +951,16 @@ cmd_sscanf(const char *buf, const char *
 	if(buf[0] == '0' && (buf[1] == 'x' || buf[1] == 'X'))
 	{
 		if(!fmt)
-			strlcpy(fmt_tmp, "%x", sizeof(fmt_tmp));
+			strscpy(fmt_tmp, "%x", sizeof(fmt_tmp));
 		else
 		{
 			if(strspn(fmt, "%lLxXhH") != strlen(fmt))
 				return SW_BAD_VALUE;
 			if(fmt[0] == '%' && ((fmt[1] == 'l' || fmt[1] == 'L') &&
 				(fmt[2] == 'l' || fmt[2] == 'L')))
-				strlcpy(fmt_tmp, "%llx", sizeof(fmt_tmp));
+				strscpy(fmt_tmp, "%llx", sizeof(fmt_tmp));
 			else
-				strlcpy(fmt_tmp, fmt, sizeof(fmt_tmp));
+				strscpy(fmt_tmp, fmt, sizeof(fmt_tmp));
 		}
 	}
 	else
@@ -968,16 +968,16 @@ cmd_sscanf(const char *buf, const char *
 		if(strspn(buf, "1234567890") != strlen(buf))
 			return SW_BAD_VALUE;
 		if(!fmt)
-			strlcpy(fmt_tmp, "%d", sizeof(fmt_tmp));
+			strscpy(fmt_tmp, "%d", sizeof(fmt_tmp));
 		else
 		{
 			if(strspn(fmt, "%lLdD") != strlen(fmt))
 				return SW_BAD_VALUE;
 			if(fmt[0] == '%' && ((fmt[1] == 'l' || fmt[1] == 'L') &&
 				(fmt[2] == 'l' || fmt[2] == 'L')))
-				strlcpy(fmt_tmp, "%lld", sizeof(fmt_tmp));
+				strscpy(fmt_tmp, "%lld", sizeof(fmt_tmp));
 			else
-				strlcpy(fmt_tmp, fmt, sizeof(fmt_tmp));
+				strscpy(fmt_tmp, fmt, sizeof(fmt_tmp));
 		}
 	}
 	if(sscanf(buf, fmt_tmp, arg_val) != 1)
@@ -2736,7 +2736,7 @@ cmd_data_check_portmap(char *cmdstr, fal
         return SW_OK;
     }
 
-    strlcpy(tmp_str, cmdstr, sizeof(tmp_str));
+    strscpy(tmp_str, cmdstr, sizeof(tmp_str));
     tmp = (void *) strsep(&cmdstr, ",");
     while (tmp)
     {
@@ -12818,7 +12818,7 @@ cmd_data_check_tunnel_encap_entry(char *
 						break;
 					}
 					/* copy 2 chars from cmd */
-					strlcpy(cmd_byte, cmd, sizeof(cmd_byte));
+					strscpy(cmd_byte, cmd, sizeof(cmd_byte));
 					sscanf(cmd_byte, "%hhx",
 						&(entry.pkt_header.pkt_header_data[bytes]));
 					cmd += 2;
