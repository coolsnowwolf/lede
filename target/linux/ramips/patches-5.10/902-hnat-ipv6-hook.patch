--- a/net/core/skbuff.c	2022-05-18 11:03:02.361259000 +0800
+++ b/net/core/skbuff.c	2022-05-18 11:02:09.832117270 +0800
@@ -70,7 +70,7 @@
 #include <net/xfrm.h>
 #include <net/mpls.h>
 #include <net/mptcp.h>
-
+#include <net/ra_nat.h>
 #include <linux/uaccess.h>
 #include <trace/events/skb.h>
 #include <linux/highmem.h>
@@ -707,6 +707,14 @@
 
 void __kfree_skb(struct sk_buff *skb)
 {
+	
+		
+		    
+			
+				
+				       
+		
+	
 	skb_release_all(skb);
 	kfree_skbmem(skb);
 }
@@ -1665,7 +1673,15 @@
 	memcpy((struct skb_shared_info *)(data + size),
 	       skb_shinfo(skb),
 	       offsetof(struct skb_shared_info, frags[skb_shinfo(skb)->nr_frags]));
-
+	memcpy(data, skb->head, FOE_INFO_LEN);
+	
+		
+
+			
+				
+				       
+		
+	
 	/*
 	 * if shinfo is shared we must drop the old head gracefully, but if it
 	 * is not we can just drop the old head and let the existing refcount 
 
--- a/include/net/netfilter/nf_hnat.h
+++ b/include/net/netfilter/nf_hnat.h
@@ -0,0 +1,17 @@
+#include <linux/netdevice.h>
+
+#define HNAT_PATH_ETHERNET      BIT(0)
+#define HNAT_PATH_VLAN          BIT(1)
+#define HNAT_PATH_PPPOE         BIT(2)
+#define HNAT_PATH_DSLITE        BIT(3)
+
+struct hnat_hw_path {
+        const struct net_device *virt_dev;
+        const struct net_device *real_dev;
+        u32 flags;
+        u8 eth_src[ETH_ALEN];
+        u8 eth_dest[ETH_ALEN];
+        u16 vlan_proto;
+        u16 vlan_id;
+        u16 pppoe_sid;
+};


--- a/drivers/net/ppp/ppp_generic.c	2022-05-19 13:46:26.673641000 +0800
+++ b/drivers/net/ppp/ppp_generic.c	2022-05-19 13:58:49.992600593 +0800
@@ -52,7 +52,7 @@
 #include <linux/nsproxy.h>
 #include <net/net_namespace.h>
 #include <net/netns/generic.h>
-
+#include <net/netfilter/nf_hnat.h>
 #define PPP_VERSION	"2.4.2"
 
 /*
@@ -1487,6 +1487,26 @@
 	return chan->ops->fill_forward_path(ctx, path, chan);
 }
 
+static int ppp_hnat_check(struct hnat_hw_path *path)
+{
+        struct ppp *ppp = netdev_priv(path->real_dev);
+        struct ppp_channel *chan;
+        struct channel *pch;
+
+        if (ppp->flags & SC_MULTILINK)
+                return -EOPNOTSUPP;
+
+        if (list_empty(&ppp->channels))
+                return -ENODEV;
+
+        pch = list_first_entry(&ppp->channels, struct channel, clist);
+        chan = pch->chan;
+        if (!chan->ops->hnat_check)
+                return -EOPNOTSUPP;
+
+        return chan->ops->hnat_check(chan, path);
+}
+
 static const struct net_device_ops ppp_netdev_ops = {
 	.ndo_init	 = ppp_dev_init,
 	.ndo_uninit      = ppp_dev_uninit,
@@ -1494,6 +1514,7 @@
 	.ndo_do_ioctl    = ppp_net_ioctl,
 	.ndo_get_stats64 = ppp_get_stats64,
 	.ndo_fill_forward_path = ppp_fill_forward_path,
+	.ndo_hnat_check  = ppp_hnat_check,
 };
 
 static struct device_type ppp_type = {

--- a/drivers/net/ppp/pppoe.c	2022-05-19 13:46:26.673641000 +0800
+++ b/drivers/net/ppp/pppoe.c	2022-05-19 14:00:15.419387398 +0800
@@ -79,7 +79,7 @@
 #include <net/sock.h>
 
 #include <linux/uaccess.h>
-
+#include <net/netfilter/nf_hnat.h>
 #define PPPOE_HASH_BITS 4
 #define PPPOE_HASH_SIZE (1 << PPPOE_HASH_BITS)
 #define PPPOE_HASH_MASK	(PPPOE_HASH_SIZE - 1)
@@ -994,9 +994,33 @@
 	return 0;
 }
 
+static int pppoe_hnat_check(struct ppp_channel *chan,
+                            struct hnat_hw_path *path)
+{
+        struct sock *sk = (struct sock *)chan->private;
+        struct pppox_sock *po = pppox_sk(sk);
+        struct net_device *dev = po->pppoe_dev;
+
+        if (sock_flag(sk, SOCK_DEAD) ||
+            !(sk->sk_state & PPPOX_CONNECTED) || !dev)
+                return -ENODEV;
+
+        path->real_dev = po->pppoe_dev;
+        path->flags |= HNAT_PATH_PPPOE;
+        memcpy(path->eth_src, po->pppoe_dev->dev_addr, ETH_ALEN);
+        memcpy(path->eth_dest, po->pppoe_pa.remote, ETH_ALEN);
+        path->pppoe_sid = be16_to_cpu(po->num);
+
+        if (path->real_dev->netdev_ops->ndo_hnat_check)
+                return path->real_dev->netdev_ops->ndo_hnat_check(path);
+
+        return 0;
+}
+
 static const struct ppp_channel_ops pppoe_chan_ops = {
 	.start_xmit = pppoe_xmit,
 	.fill_forward_path = pppoe_fill_forward_path,
+	.hnat_check = pppoe_hnat_check,
 };
 
 static int pppoe_recvmsg(struct socket *sock, struct msghdr *m,

--- a/include/linux/netdevice.h	2022-05-19 13:46:28.677790000 +0800
+++ b/include/linux/netdevice.h	2022-05-19 13:56:13.845845770 +0800
@@ -1003,7 +1003,7 @@
 	struct list_head list;
 	struct notifier_block *nb;
 };
-
+struct hnat_hw_path;
 /*
  * This structure defines the management hooks for network devices.
  * The following hooks can be defined; unless noted otherwise, they are
@@ -1545,6 +1545,7 @@
 	struct net_device *	(*ndo_get_peer_dev)(struct net_device *dev);
 	int                     (*ndo_fill_forward_path)(struct net_device_path_ctx *ctx,
                                                          struct net_device_path *path);
+        int                     (*ndo_hnat_check)(struct hnat_hw_path *path);
 };
 
 /**

--- a/include/linux/ppp_channel.h	2022-05-19 13:46:26.677641000 +0800
+++ b/include/linux/ppp_channel.h	2022-05-19 14:01:01.777387085 +0800
@@ -31,6 +31,7 @@
 	int	(*fill_forward_path)(struct net_device_path_ctx *,
 				     struct net_device_path *,
 				     const struct ppp_channel *);
+	int	(*hnat_check)(struct ppp_channel *, struct hnat_hw_path *);
 };
 
 struct ppp_channel {

--- a/net/8021q/vlan_dev.c	2022-05-19 13:46:26.665640000 +0800
+++ b/net/8021q/vlan_dev.c	2022-05-19 14:03:23.747097484 +0800
@@ -31,6 +31,8 @@
 #include "vlanproc.h"
 #include <linux/if_vlan.h>
 #include <linux/netpoll.h>
+#include <linux/netfilter.h>
+#include <net/netfilter/nf_hnat.h>
 
 /*
  *	Create the VLAN header for an arbitrary protocol layer
@@ -790,6 +792,24 @@
 	return 0;
 }
 
+static int vlan_dev_hnat_check(struct hnat_hw_path *path)
+{
+	struct net_device *dev = path->real_dev;
+	struct vlan_dev_priv *vlan = vlan_dev_priv(dev);
+
+	if (path->flags & HNAT_PATH_VLAN)
+		return -EEXIST;
+
+	path->flags |= HNAT_PATH_VLAN;
+	path->vlan_proto = vlan->vlan_proto;
+	path->vlan_id = vlan->vlan_id;
+	path->virt_dev = dev;
+	path->real_dev = vlan->real_dev;
+
+	if (vlan->real_dev->netdev_ops->ndo_hnat_check)
+		return vlan->real_dev->netdev_ops->ndo_hnat_check(path);
+	return 0;
+}
 static const struct ethtool_ops vlan_ethtool_ops = {
 	.get_link_ksettings	= vlan_ethtool_get_link_ksettings,
 	.get_drvinfo	        = vlan_ethtool_get_drvinfo,
@@ -829,6 +849,7 @@
 	.ndo_fix_features	= vlan_dev_fix_features,
 	.ndo_get_iflink		= vlan_dev_get_iflink,
 	.ndo_fill_forward_path	= vlan_dev_fill_forward_path,
+	.ndo_hnat_check		= vlan_dev_hnat_check,
 };
 
 static void vlan_dev_free(struct net_device *dev)

--- a/net/ipv6/ip6_tunnel.c	2022-05-19 13:46:28.161751000 +0800
+++ b/net/ipv6/ip6_tunnel.c	2022-05-19 14:05:25.500612911 +0800
@@ -56,7 +56,7 @@
 #include <net/net_namespace.h>
 #include <net/netns/generic.h>
 #include <net/dst_metadata.h>
-
+#include <net/netfilter/nf_hnat.h>
 MODULE_AUTHOR("Ville Nuorvala");
 MODULE_DESCRIPTION("IPv6 tunneling device");
 MODULE_LICENSE("GPL");
@@ -1937,6 +1937,23 @@
 }
 EXPORT_SYMBOL(ip6_tnl_change_mtu);
 
+static int ipip6_dev_hnat_check(struct hnat_hw_path *path)
+{
+
+	struct net_device *dev = path->real_dev;
+	struct ip6_tnl *tnl = netdev_priv(dev);
+
+	if (path->flags & HNAT_PATH_DSLITE)
+		return -EEXIST;
+
+	path->flags |= HNAT_PATH_DSLITE;
+	path->real_dev = tnl->dev;
+
+	return 0;
+
+}
+
+
 int ip6_tnl_get_iflink(const struct net_device *dev)
 {
 	struct ip6_tnl *t = netdev_priv(dev);
@@ -2006,6 +2023,7 @@
 	.ndo_change_mtu = ip6_tnl_change_mtu,
 	.ndo_get_stats	= ip6_get_stats,
 	.ndo_get_iflink = ip6_tnl_get_iflink,
+	.ndo_hnat_check = ipip6_dev_hnat_check,
 };
 
 #define IPXIPX_FEATURES (NETIF_F_SG |		\
		
--- a/include/linux/mdio.h	2022-03-28 15:57:11.000000000 +0800
+++ b/include/linux/mdio.h	2022-12-27 16:18:35.806004570 +0800
@@ -5,7 +5,7 @@
  */
 #ifndef __LINUX_MDIO_H__
 #define __LINUX_MDIO_H__
-
+#include <linux/bitfield.h>
 #include <uapi/linux/mdio.h>
 #include <linux/mod_devicetable.h>
 
@@ -14,8 +14,10 @@
  */
 #define MII_ADDR_C45		(1<<30)
 #define MII_DEVADDR_C45_SHIFT	16
+#define MII_DEVADDR_C45_MASK	GENMASK(20, 16)
 #define MII_REGADDR_C45_MASK	GENMASK(15, 0)
 
+
 struct gpio_desc;
 struct mii_bus;
 struct reset_control;
@@ -342,6 +344,16 @@
 	return MII_ADDR_C45 | devad << MII_DEVADDR_C45_SHIFT | regnum;
 }
 
+static inline u16 mdiobus_c45_regad(u32 regnum)
+{
+	return FIELD_GET(MII_REGADDR_C45_MASK, regnum);
+}
+
+static inline u16 mdiobus_c45_devad(u32 regnum)
+{
+	return FIELD_GET(MII_DEVADDR_C45_MASK, regnum);
+}
+
 static inline int __mdiobus_c45_read(struct mii_bus *bus, int prtad, int devad,
 				     u16 regnum)
 {


