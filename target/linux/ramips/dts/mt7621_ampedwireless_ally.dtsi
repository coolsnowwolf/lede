// SPDX-License-Identifier: GPL-2.0-or-later OR MIT

#include "mt7621.dtsi"

#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>

/ {
	aliases {
		led-boot = &led_status_amber;
		led-failsafe = &led_status_amber;
		led-running = &led_status_green;
		led-upgrade = &led_status_red;
	};

	keys {
		compatible = "gpio-keys";

		led_switch {
			label = "led_switch";
			gpios = <&gpio 13 GPIO_ACTIVE_HIGH>;
			linux,code = <KEY_LIGHTS_TOGGLE>;
			linux,input-type = <EV_SW>;
		};

		reset {
			label = "reset";
			gpios = <&gpio 16 GPIO_ACTIVE_LOW>;
			linux,code = <KEY_RESTART>;
		};

		wps {
			label = "wps";
			gpios = <&gpio 18 GPIO_ACTIVE_HIGH>;
			linux,code = <KEY_WPS_BUTTON>;
		};
	};

	leds {
		compatible = "gpio-leds";

		led_status_green: status_green {
			label = "green:status";
			gpios = <&gpio 7 GPIO_ACTIVE_HIGH>;
		};

		led_status_red: status_red {
			label = "red:status";
			gpios = <&gpio 12 GPIO_ACTIVE_HIGH>;
		};

		led_status_amber: status_amber {
			label = "amber:status";
			gpios = <&gpio 14 GPIO_ACTIVE_HIGH>;
		};
	};
};

&pcie {
	status = "okay";
};

&pcie0 {
	wifi@0,0 {
		compatible = "pci14c3,7615";
		reg = <0x0000 0 0 0 0>;
		mediatek,mtd-eeprom = <&factory 0x0000>;
		ieee80211-freq-limit = <2400000 2500000>;
	};
};

&pcie1 {
	wifi@0,0 {
		compatible = "pci14c3,7615";
		reg = <0x0000 0 0 0 0>;
		mediatek,mtd-eeprom = <&factory 0x8000>;
		ieee80211-freq-limit = <5000000 6000000>;
	};
};

&state_default {
	gpio {
		groups = "uart2", "uart3", "jtag", "wdt";
		function = "gpio";
	};
};

&nand {
	status = "okay";

	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		partition@0 {
			label = "u-boot";
			reg = <0x0 0x80000>;
			read-only;
		};

		partition@80000 {
			label = "u-boot-env";
			reg = <0x80000 0x80000>;
		};

		factory: partition@100000 {
			label = "factory";
			reg = <0x100000 0x40000>;
			read-only;
		};

		/*
		 * uboot expects to find kernels at 0x140000 & 0x2140000,
		 * referred to as Uimage & Uimage1 in factory FW, respectively.
		 * U-boot variable 'bootImage' controls which is booted;
		 * 0 for the first, 1 for the 2nd.
		 * There's a 3rd partition, Uimage2 (0x4140000), which
		 * I expected to be a recovery image, but is actually blank.
		 *
		 * A kernel is considered suitable for handing control over
		 * if its linux magic number exists & uImage CRC are correct.
		 * If either of those conditions fail, 'bootImage' value
		 * is toggled in uboot env & a restart performed in the hope that the
		 * alternate kernel is okay.
		 *
		 * Note uboot's tftp flash install writes the transferred
		 * image to the active kernel partition.
		 */

		partition@140000 {
			label = "kernel";
			reg = <0x140000 0x400000>;
		};

		partition@540000 {
			label = "ubi";
			reg = <0x540000 0x1c00000>;
		};

		partition@2140000 {
			label = "oem";
			reg = <0x2140000 0x2000000>;
		};

		partition@4140000 {
			label = "backup";
			reg = <0x4140000 0x2000000>;
		};

		partition@6140000 {
			label = "chime";
			reg = <0x6140000 0xa00000>;
		};

		partition@6b40000 {
			label = "data";
			reg = <0x6b40000 0xa00000>;
		};

		partition@7540000 {
			label = "reserved";
			reg = <0x7540000 0x840000>;
			read-only;
		};

		partition@7d80000 {
			label = "nvram";
			reg = <0x7d80000 0x100000>;
			read-only;
		};

		partition@7e80000 {
			label = "hwconfig";
			reg = <0x7e80000 0x100000>;
			read-only;
		};
	};
};
