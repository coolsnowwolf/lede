From fc7824df7022869a403c8a5122a55fe73a193466 Mon Sep 17 00:00:00 2001
From: Camelia Groza <camelia.groza@nxp.com>
Date: Tue, 29 Oct 2019 16:50:34 +0200
Subject: [PATCH] sdk_dpaa: ls1043a errata: re-enable SG support and recycling

With certain limitation, SG frames can be used safely without triggering
the errata.

Buffers can be recycled, even after realigning the data.

Signed-off-by: Camelia Groza <camelia.groza@nxp.com>
---
 drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c    | 10 ----------
 drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h    |  1 -
 drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c |  9 ---------
 3 files changed, 20 deletions(-)

--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.c
@@ -778,16 +778,6 @@ static int dpa_private_netdev_init(struc
 	/* Advertise NETIF_F_HW_ACCEL_MQ to avoid Tx timeout warnings */
 	net_dev->features |= NETIF_F_HW_ACCEL_MQ;
 
-#ifndef CONFIG_PPC
-	/* Due to the A010022 FMan errata, we can not use S/G frames. We need
-	 * to stop advertising S/G and GSO support.
-	 */
-	if (unlikely(dpaa_errata_a010022)) {
-		net_dev->hw_features &= ~NETIF_F_SG;
-		net_dev->features &= ~NETIF_F_GSO;
-	}
-#endif
-
 	return dpa_netdev_init(net_dev, mac_addr, tx_timeout);
 }
 
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth.h
@@ -661,7 +661,6 @@ static inline void _dpa_bp_free_pf(void
 
 #ifndef CONFIG_PPC
 extern bool dpaa_errata_a010022; /* SoC affected by A010022 errata */
-#define NONREC_MARK	0x01
 #define CROSS_4K(start, size) \
 	(((uintptr_t)(start) + (size)) > \
 	 (((uintptr_t)(start) + 0x1000) & ~0xFFF))
--- a/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
+++ b/drivers/net/ethernet/freescale/sdk_dpaa/dpaa_eth_sg.c
@@ -327,12 +327,6 @@ EXPORT_SYMBOL(_dpa_cleanup_tx_fd);
 #ifndef CONFIG_FSL_DPAA_TS
 bool dpa_skb_is_recyclable(struct sk_buff *skb)
 {
-#ifndef CONFIG_PPC
-	/* Do no recycle skbs realigned by the errata workaround */
-	if (unlikely(dpaa_errata_a010022) && skb->mark == NONREC_MARK)
-		return false;
-#endif
-
 	/* No recycling possible if skb buffer is kmalloc'ed  */
 	if (skb->head_frag == 0)
 		return false;
@@ -906,9 +900,6 @@ static struct sk_buff *a010022_realign_s
 	skb_set_network_header(nskb, net_offset);
 	skb_set_transport_header(nskb, trans_offset);
 
-	/* We don't want the buffer to be recycled so we mark it accordingly */
-	nskb->mark = NONREC_MARK;
-
 	return nskb;
 
 err:
