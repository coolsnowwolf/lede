From 27ea8554c8fdcdf1d7aba5ce47630d878ce96691 Mon Sep 17 00:00:00 2001
From: Biwen Li <biwen.li@nxp.com>
Date: Thu, 24 Oct 2019 13:14:44 +0800
Subject: [PATCH] i2c: imx: correct code of errata A-010650 for layerscape
 platform

- Simplify code with helper function i2c_imx_clr_al_bit
- Fix an error about clearing arbitration lost bit
- Fix an error that not set I2Cx_IBCR following by
  the workaround of A-010650 (in step 5)

Reviewed-by: Clark Wang <xiaoning.wang@nxp.com>
Signed-off-by: Biwen Li <biwen.li@nxp.com>
---
 drivers/i2c/busses/i2c-imx.c | 38 +++++++++++++++++++-------------------
 1 file changed, 19 insertions(+), 19 deletions(-)

--- a/drivers/i2c/busses/i2c-imx.c
+++ b/drivers/i2c/busses/i2c-imx.c
@@ -516,6 +516,14 @@ static void i2c_imx_clear_irq(struct imx
 	imx_i2c_write_reg(temp, i2c_imx, IMX_I2C_I2SR);
 }
 
+/* Clear arbitration lost bit */
+static void i2c_imx_clr_al_bit(unsigned int status, struct imx_i2c_struct *i2c_imx)
+{
+	status &= ~I2SR_IAL;
+	status |= (i2c_imx->hwdata->i2sr_clr_opcode & I2SR_IAL);
+	imx_i2c_write_reg(status, i2c_imx, IMX_I2C_I2SR);
+}
+
 static int i2c_imx_bus_busy(struct imx_i2c_struct *i2c_imx, int for_busy)
 {
 	unsigned long orig_jiffies = jiffies;
@@ -528,7 +536,7 @@ static int i2c_imx_bus_busy(struct imx_i
 
 		/* check for arbitration lost */
 		if (temp & I2SR_IAL) {
-			i2c_imx_clear_irq(i2c_imx, I2SR_IAL);
+			i2c_imx_clr_al_bit(temp, i2c_imx);
 			return -EAGAIN;
 		}
 
@@ -724,14 +732,6 @@ static void i2c_imx_clr_if_bit(unsigned
 	imx_i2c_write_reg(status, i2c_imx, IMX_I2C_I2SR);
 }
 
-/* Clear arbitration lost bit */
-static void i2c_imx_clr_al_bit(unsigned int status, struct imx_i2c_struct *i2c_imx)
-{
-	status &= ~I2SR_IAL;
-	status |= (i2c_imx->hwdata->i2sr_clr_opcode & I2SR_IAL);
-	imx_i2c_write_reg(status, i2c_imx, IMX_I2C_I2SR);
-}
-
 static irqreturn_t i2c_imx_master_isr(struct imx_i2c_struct *i2c_imx)
 {
 	unsigned int status;
@@ -1080,12 +1080,14 @@ static int i2c_imx_recovery_for_layersca
 	gpio_set_value(i2c_imx->gpio, 1);
 
 	/*
-	 * Set I2Cx_IBCR = 0h00 to generate a STOP and then
-	 * set I2Cx_IBCR = 0h80 to reset
+	 * Set I2Cx_IBCR = 0h00 to generate a STOP
 	 */
-	temp = imx_i2c_read_reg(i2c_imx, IMX_I2C_I2CR);
-	temp &= ~(I2CR_MSTA | I2CR_MTX);
-	imx_i2c_write_reg(temp, i2c_imx, IMX_I2C_I2CR);
+	imx_i2c_write_reg(i2c_imx->hwdata->i2cr_ien_opcode, i2c_imx, IMX_I2C_I2CR);
+
+	/*
+	 * Set I2Cx_IBCR = 0h80 to reset the I2Cx controller
+	 */
+	imx_i2c_write_reg(i2c_imx->hwdata->i2cr_ien_opcode | I2CR_IEN, i2c_imx, IMX_I2C_I2CR);
 
 	/* Restore the saved value of the register SCFG_RCWPMUXCR0 */
 	if (i2c_imx->need_set_pmuxcr == 1) {
@@ -1099,10 +1101,9 @@ static int i2c_imx_recovery_for_layersca
 	 * I2C_IBSR[IBAL] = 1
 	 */
 	temp = imx_i2c_read_reg(i2c_imx, IMX_I2C_I2SR);
-	if (temp & I2SR_IAL) {
-		temp &= ~I2SR_IAL;
-		imx_i2c_write_reg(temp, i2c_imx, IMX_I2C_I2SR);
-	}
+	if (temp & I2SR_IAL)
+		i2c_imx_clr_al_bit(temp, i2c_imx);
+
 	return 0;
 }
 
