# Boot menu for Banana Pi R2
# Copyright Â© 2020 David Woodhouse <dwmw2@infradead.org>

kernel=uImage
loadaddr=0x88000000
dtaddr=0x83f00000
fdt_high=0xffffffff

console=ttyS2,115200
bootopts=rootfstype=squashfs,ext4 rootwait

# Create the command line (with appropriate root=) and boot the Linux FIT image.
boot1=setenv bootargs "console=${console} root=${rootdev} ${bootopts}";printenv bootargs;\
 fatload mmc ${partition} ${loadaddr} ${kernel}; bootm

# The preloader leaves a breadcrumb behind to say what it booted from.
checkbootedfrom=if itest.l *81dffff0 == 434d4d65 ; then setenv bootedfrom eMMC; else setenv bootedfrom SD; fi;

# Build the boot menu one item at a time
bm_count=0
checkkernel=test -e mmc ${bm_part} ${kernel}
addbm=if run checkkernel; then setenv bootmenu_${bm_count} "Boot from ${bm_dev}.=setenv partition ${bm_part};setenv rootdev ${bm_root};run boot1";if test "${bootedfrom}" = "${bm_dev}"; then setenv bootmenu_default ${bm_count};fi;setexpr bm_count ${bm_count} + 1; fi
# Here we assume that SD card id mmcblk1 and eMMC is mmcblk0 in linux. Swap them if your DTS define them in reverse order.
addeMMCbm=setenv bm_part 0:2;setenv bm_root /dev/mmcblk0p3;setenv bm_dev eMMC;run addbm
addSDbm=setenv bm_part 1:2;setenv bm_root /dev/mmcblk1p3;setenv bm_dev SD;run addbm
addinstallbm=if test "${bootedfrom}" = "SD";then run checkinstall; if run validparts; then setenv bootmenu_${bm_count} "Install OpenWrt from SD to internal eMMC.=run doinstall";setexpr bm_count ${bm_count} + 1;fi;fi

runbootmenu=if test "${bootedfrom}" = "";then run checkbootedfrom;fi;\
 setenv bm_count 0;run addeMMCbm;run addSDbm;run addinstallbm;setenv bootmenu_${bm_count};\
 bootmenu

bootdelay=0
bootcmd=run checkbootedfrom;run runbootmenu

# XX: Can we read this from the device, or must we trust they're all the same as mine?
# Probably not that important as we're unlikely ever to hit the limit anyway.
maxsect=0xe8ffff
validparts=false

# We could use 'part size' here but I'd like to check the types too.
checkinstall=mmc dev 1;\
 mmc read 0x88000002 0 1;\
 setenv validparts true;\
 test -e mmc 1:2 eMMCboot.bin || setenv validparts false && echo "eMMCboot.bin not present on SD partition 2";\
 if run validparts && itest.b *0x880001c4 != 0x41; then echo "SD partition 1 is not a PReP Boot partition"; setenv validparts false; fi;\
 if run validparts && itest.l *0x880001c8 != 0x280; then echo "SD partition 1 does not start at 320KiB for U-Boot"; mmc part; exit; fi;\
 if run validparts && itest.l *0x880001cc != 0x400; then echo "SD partition 1 is not 512KiB in size for U-Boot"; mmc part; exit; fi;\
 if run validparts && itest.b *0x880001d4 != 0x0c; then echo "SD partition 2 is not a FAT32 partition"; setenv validparts false; fi;\
 if run validparts && itest.b *0x880001e4 != 0x83; then echo "SD partition 3 is not a Linux partition"; setenv validparts false; fi;\
 setexpr.l part2_start *0x880001d8;setexpr.l part2_len *0x880001dc;setexpr.l part3_start *0x880001e8;setexpr.l part3_len *0x880001ec;\
 if run validparts && test 0x${part2_start} -gt ${maxsect}; then echo "SD partition 2 start too high"; setenv validparts false; fi;\
 if run validparts && test 0x${part2_len} -gt ${maxsect}; then echo "SD partition 2 is too large"; setenv validparts false; fi;\
 if run validparts && test 0x${part3_start} -gt ${maxsect}; then echo "SD partition 3 start too high"; setenv validparts false; fi;\
 if run validparts && test 0x${part3_len} -gt ${maxsect}; then echo "SD partition 2 is too large"; setenv validparts false; fi;\
 setexpr.l part2_end 0x$(part2_start} + 0x${part2_len};setexpr.l part3_end 0x${part3_start} + 0x${part3_len};\
 if run validparts && test 0x${part2_end} -ge ${maxsect}; then echo "SD partition 2 end too high"; setenv validparts false; fi;\
 if run validparts && test 0x${part3_end} -ge ${maxsect}; then echo "SD partition 3 end too high"; setenv validparts false; fi;

# Copy a single chunk, up to 0x8000 sectors / 16MiB, from SD to eMMC at the specified offset.
writechunk=setenv thislen 8000; if test 0x${partlen} -lt 0x${thislen}; then setenv thislen ${partlen};fi;\
 mmc dev 1;mmc read ${loadaddr} 0x${partofs} 0x${thislen};\
 mmc dev 0; mmc write ${loadaddr} 0x${partofs} 0x${thislen};\
 setexpr partofs 0x${partofs} + 0x${thislen};setexpr partlen 0x${partlen} - 0x${thislen}

# Copy a partition defined by ${partofs} / ${partlen} from SD to eMMC
writepart=while test 0x${partlen} -ne 0; do run writechunk; done

# Configure the eMMC boot partition and write eMMCboot.bin to it
writeboot=mmc partconf 0 1 1 0;fatload mmc 1:2 ${loadaddr} eMMCboot.bin;\
 setexpr filesize ${filesize} + 0x1ff;setexpr blocks ${filesize} / 0x200;\
 mmc dev 0 1;mmc write ${loadaddr} 0 ${blocks}

# Install OpenWrt from the SD card to internal eMMC.
doinstall=run checkinstall;if run validparts;then run writeboot;\
 echo "Copying preloader and U-Boot";setenv partofs 0;setenv partlen 680;run writepart;\
 echo "Copying FAT boot partition";setenv partofs ${part2_start};setenv partlen ${part2_len};run writepart;\
 echo "Copying root partition";setenv partofs ${part3_start};setenv partlen ${part3_len};run writepart;\
 echo "Installed OpenWrt to eMMC";setenv bootedfrom eMMC;run runbootmenu;fi
