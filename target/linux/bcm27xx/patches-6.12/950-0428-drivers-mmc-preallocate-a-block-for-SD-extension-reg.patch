From 142ae0f3cfc5185ccd7aaff6ffe4336b47572235 Mon Sep 17 00:00:00 2001
From: Jonathan Bell <jonathan@raspberrypi.com>
Date: Wed, 20 Mar 2024 13:00:30 +0000
Subject: [PATCH] drivers: mmc: preallocate a block for SD extension register
 accesses

The Performance Extension register is regularly accessed in a hot path
to do write cache flushes. Don't invoke kmalloc/kfree for every access,
preallocate a 512B buffer for this purpose.

Also remove an unused alloc in sd_enable_cache().

Signed-off-by: Jonathan Bell <jonathan@raspberrypi.com>
---
 drivers/mmc/core/bus.c   |  2 ++
 drivers/mmc/core/sd.c    | 34 +++++++++++-----------------------
 include/linux/mmc/card.h |  1 +
 3 files changed, 14 insertions(+), 23 deletions(-)

--- a/drivers/mmc/core/bus.c
+++ b/drivers/mmc/core/bus.c
@@ -266,6 +266,8 @@ static void mmc_release_card(struct devi
 
 	sdio_free_common_cis(card);
 
+	kfree(card->ext_reg_buf);
+
 	kfree(card->info);
 
 	kfree(card);
--- a/drivers/mmc/core/sd.c
+++ b/drivers/mmc/core/sd.c
@@ -1021,9 +1021,8 @@ int sd_write_ext_reg(struct mmc_card *ca
 	struct scatterlist sg;
 	u8 *reg_buf;
 
-	reg_buf = kzalloc(512, GFP_KERNEL);
-	if (!reg_buf)
-		return -ENOMEM;
+	reg_buf = card->ext_reg_buf;
+	memset(reg_buf, 0, 512);
 
 	mrq.cmd = &cmd;
 	mrq.data = &data;
@@ -1055,8 +1054,6 @@ int sd_write_ext_reg(struct mmc_card *ca
 	mmc_set_data_timeout(&data, card);
 	mmc_wait_for_req(host, &mrq);
 
-	kfree(reg_buf);
-
 	/*
 	 * Note that, the SD card is allowed to signal busy on DAT0 up to 1s
 	 * after the CMD49. Although, let's leave this to be managed by the
@@ -1097,9 +1094,7 @@ static int sd_parse_ext_reg_power(struct
 	int err;
 	u8 *reg_buf;
 
-	reg_buf = kzalloc(512, GFP_KERNEL);
-	if (!reg_buf)
-		return -ENOMEM;
+	reg_buf = card->ext_reg_buf;
 
 	/* Read the extension register for power management function. */
 	err = sd_read_ext_reg(card, fno, page, offset, 512, reg_buf);
@@ -1129,7 +1124,6 @@ static int sd_parse_ext_reg_power(struct
 	card->ext_power.offset = offset;
 
 out:
-	kfree(reg_buf);
 	return err;
 }
 
@@ -1139,9 +1133,7 @@ static int sd_parse_ext_reg_perf(struct
 	int err;
 	u8 *reg_buf;
 
-	reg_buf = kzalloc(512, GFP_KERNEL);
-	if (!reg_buf)
-		return -ENOMEM;
+	reg_buf = card->ext_reg_buf;
 
 	err = sd_read_ext_reg(card, fno, page, offset, 512, reg_buf);
 	if (err) {
@@ -1184,7 +1176,6 @@ static int sd_parse_ext_reg_perf(struct
 	card->ext_perf.offset = offset;
 
 out:
-	kfree(reg_buf);
 	return err;
 }
 
@@ -1255,6 +1246,12 @@ static int sd_read_ext_regs(struct mmc_c
 	if (!gen_info_buf)
 		return -ENOMEM;
 
+	card->ext_reg_buf = kzalloc(512, GFP_KERNEL);
+	if (!card->ext_reg_buf) {
+		err = -ENOMEM;
+		goto out;
+	}
+
 	/*
 	 * Read 512 bytes of general info, which is found at function number 0,
 	 * at page 0 and with no offset.
@@ -1321,9 +1318,7 @@ static int sd_flush_cache(struct mmc_hos
 	if (!sd_cache_enabled(host))
 		return 0;
 
-	reg_buf = kzalloc(512, GFP_KERNEL);
-	if (!reg_buf)
-		return -ENOMEM;
+	reg_buf = card->ext_reg_buf;
 
 	/*
 	 * Set Flush Cache at bit 0 in the performance enhancement register at
@@ -1359,21 +1354,15 @@ static int sd_flush_cache(struct mmc_hos
 	if (reg_buf[0] & BIT(0))
 		err = -ETIMEDOUT;
 out:
-	kfree(reg_buf);
 	return err;
 }
 
 static int sd_enable_cache(struct mmc_card *card)
 {
-	u8 *reg_buf;
 	int err;
 
 	card->ext_perf.feature_enabled &= ~SD_EXT_PERF_CACHE;
 
-	reg_buf = kzalloc(512, GFP_KERNEL);
-	if (!reg_buf)
-		return -ENOMEM;
-
 	/*
 	 * Set Cache Enable at bit 0 in the performance enhancement register at
 	 * 260 bytes offset.
@@ -1392,7 +1381,6 @@ static int sd_enable_cache(struct mmc_ca
 		card->ext_perf.feature_enabled |= SD_EXT_PERF_CACHE;
 
 out:
-	kfree(reg_buf);
 	return err;
 }
 
--- a/include/linux/mmc/card.h
+++ b/include/linux/mmc/card.h
@@ -320,6 +320,7 @@ struct mmc_card {
 	struct sd_switch_caps	sw_caps;	/* switch (CMD6) caps */
 	struct sd_ext_reg	ext_power;	/* SD extension reg for PM */
 	struct sd_ext_reg	ext_perf;	/* SD extension reg for PERF */
+	u8			*ext_reg_buf;	/* 512 byte block for extension register R/W */
 
 	unsigned int		sdio_funcs;	/* number of SDIO functions */
 	atomic_t		sdio_funcs_probed; /* number of probed SDIO funcs */
