#
#
# 感谢p3terx大神的一键编译脚本
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# <https://github.com/P3TERX/Actions-OpenWrt.git>
#
name: 编译OpenWrt固件
on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH远程'
        required: false
        default: 'ssh-actions'

#定时触发开始编译(把下面两个#去掉开启,时间设置请看定时编译说明)
  schedule:
    - cron: 0 8 */5 * *

env:
  LEDE: https://github.com/coolsnowwolf/lede
  LIENOL: https://github.com/Lienol/openwrt
  PROJECT: https://github.com/immortalwrt/immortalwrt
  GITURL: https://github.com/${{github.repository}}
  Author: ${{github.actor}}
  Run_number: ${{github.run_number}}
  Run_workflow: ${{github.workflow}}
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: 编译 "${{matrix.target}}"
    strategy:
      fail-fast: false
      matrix:
        target: [Lede_nanopi_r4s]

    steps:
    - name: 准备结束
      uses: actions/checkout@v2
    
    - name: 读取配置
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        echo "Modelfile=${{matrix.target}}" >> $GITHUB_ENV
        echo "CangKu=${GITURL##*${Author}/}" >> $GITHUB_ENV
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_P1_SH=${DIY_P1_SH}" >> $GITHUB_ENV
        echo "DIY_P2_SH=${DIY_P2_SH}" >> $GITHUB_ENV
        echo "SSH_ACTIONS=${SSH_ACTIONS}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_CONFIG=${UPLOAD_CONFIG}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${UPLOAD_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "SERVERCHAN_SCKEY=${SERVERCHAN_SCKEY}" >> $GITHUB_ENV
        echo "REGULAR_UPDATE=${REGULAR_UPDATE}" >> $GITHUB_ENV
    - name: 微信通知
      uses: emon100/Action-Serverchan@v2
      if: env.SERVERCHAN_SCKEY == 'true'
      with:
        SCKEY: ${{ secrets.SCKEY }}
        text: 主人${{matrix.target}}编译开始啦
        desp: 主人您要编译的[${{matrix.target}}]固件正在努力耕耘中(${CangKu}仓库的#${Run_number}号),请耐心等待......
     
    - name: 设置系统
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /usr/lib/jvm /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    
    - name: 下载源码
      working-directory: /workdir
      run: |
        git clone -b "$REPO_BRANCH" --single-branch "$REPO_URL" "openwrt"
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        echo "Home=${GITHUB_WORKSPACE}/openwrt" >> $GITHUB_ENV
        echo "PATH1=${GITHUB_WORKSPACE}/openwrt/build/${{matrix.target}}" >> $GITHUB_ENV
        echo "artifact=${GITHUB_WORKSPACE}/openwrt/bin/Firmware" >> $GITHUB_ENV
    
    - name: 整理脚本
      run: |
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        cp -Rf "${GITHUB_WORKSPACE}/build/common"/*.sh "${PATH1}"
        chmod -R +x "${PATH1}"
        source "${PATH1}/common.sh" && Diy_settings
        rm -rf {build,README.md}
    - name: 加载设置
      run: |
        cd openwrt
        source "${PATH1}/common.sh" && Diy_all
        if [[ "${REPO_URL}" == "${LEDE}" ]]; then
          source "${PATH1}/common.sh" && Diy_lede
        elif [[ "${REPO_URL}" == "${LIENOL}" ]]; then
          source "${PATH1}/common.sh" && Diy_lienol
        elif [[ "${REPO_URL}" == "${PROJECT}" ]]; then
          source "${PATH1}/common.sh" && Diy_immortalwrt
        fi
        /bin/bash "${PATH1}/$DIY_P1_SH"
        ./scripts/feeds clean
        ./scripts/feeds update -a && ./scripts/feeds install -a
        if [[ "${REPO_URL}" == "${LEDE}" ]]; then
          source "${PATH1}/common.sh" && Diy_lede2
          echo "NAME2=Lede" >> $GITHUB_ENV
          echo "ZUOZHE=Lean's" >> $GITHUB_ENV
        elif [[ "${REPO_URL}" == "${LIENOL}" ]]; then
          source "${PATH1}/common.sh" && Diy_lienol2
          echo "NAME2=Lienol" >> $GITHUB_ENV
          echo "ZUOZHE=lienol's" >> $GITHUB_ENV
        elif [[ "${REPO_URL}" == "${PROJECT}" ]]; then
          source "${PATH1}/common.sh" && Diy_immortalwrt2
          echo "NAME2=Project" >> $GITHUB_ENV
          echo "ZUOZHE=ctcgfw" >> $GITHUB_ENV
        fi
        source "${PATH1}/common.sh" && Diy_all2
        if [ -n "$(ls -A "${PATH1}/files" 2>/dev/null)" ]; then
          cp -Rf "${PATH1}/files" "${Home}" && chmod -R +x ${Home}/files
        fi
        if [ -n "$(ls -A "${PATH1}/diy" 2>/dev/null)" ]; then
          cp -Rf "${PATH1}"/diy/* "${Home}"
        fi
        if [ -n "$(ls -A "${PATH1}/patches" 2>/dev/null)" ]; then
          find "${PATH1}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 --forward --no-backup-if-mismatch"
        fi
        /bin/bash "${PATH1}/$DIY_P2_SH"
        ./scripts/feeds install -a
        [ -e "$PATH1/$CONFIG_FILE" ] && mv "$PATH1/$CONFIG_FILE" .config
        if [[ "${REGULAR_UPDATE}" == "true" ]]; then
          echo "Compile_Date=$(date +%Y%m%d%H%M)" > $GITHUB_WORKSPACE/Openwrt.info
          source "${PATH1}/upgrade.sh" && Diy_Part1
        fi
    
    - name: SSH远程
      uses: danshui-git/debugger-action@master
      if: env.SSH_ACTIONS == 'true' || (github.event.inputs.ssh == 'ssh' && github.event.inputs.ssh  != 'false')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
    
    - name: 处理冲突
      run: |
        cd openwrt
        source "${PATH1}/common.sh" && Diy_chajian
        make defconfig
        source "${PATH1}/common.sh" && Diy_adgu
        if [ "${REGULAR_UPDATE}" == "true" ]; then
          source "${PATH1}/upgrade.sh" && Diy_Part2
        fi
    
    - name: 编译信息
      run: |
        cd openwrt
        source "${PATH1}/upgrade.sh"
        source "${PATH1}/common.sh" && Diy_xinxi
    
    - name: 下载DLL
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: 开始编译
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "::set-output name=status::success"
        echo "date=$(date "+%y.%m.%d-%H%M")" >> $GITHUB_ENV
        echo "date2=$(date "+%Y%m%d%H%M%S")" >> $GITHUB_ENV
        DEVICE="$(awk -F '[="]+' '/TARGET_BOARD/{print $2}' .config)"
        SUBTARGET="$(awk -F '[="]+' '/TARGET_SUBTARGET/{print $2}' .config)"
        if [ "${DEVICE}" == "x86" ]; then
         echo "NAME1=x86-${SUBTARGET}" >> $GITHUB_ENV
        elif [[ ${{matrix.target}} =~ (Lede_phicomm_n1|Project_phicomm_n1) ]]; then
         echo "NAME1=N1,Vplus,Beikeyun,L1Pro,S9xxx" >> $GITHUB_ENV
        else
         grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > NAME1
         [ -s NAME1 ] && echo "NAME1=$(cat NAME1)" >> $GITHUB_ENV
        fi
    - name: 上传bin文件夹
      uses: actions/upload-artifact@v2
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: Bin_filename_ipk_${{ env.NAME2 }}_${{ env.NAME1 }}_${{ env.date }}
        path: openwrt/bin
    
    - name: 整理固件
      id: organizer
      run: |
        cd openwrt
        if [[ "${REGULAR_UPDATE}" == "true" ]]; then
          source "${PATH1}/upgrade.sh" && Diy_Part3
        fi
        mkdir bin/config
        find bin/targets/ -name "*config.buildinfo*" | xargs -i mv -f {} bin/config
        if [ -n "$(ls -A "bin/targets/x86" 2>/dev/null)" ]; then
          find bin/targets/x86/* -name "*kernel*" | xargs -i mv -f {} bin/targets
        fi
        cd bin/targets/*/*
        rm -rf packages && mkdir packages
        find -name "*buildinfo*" | xargs -i mv -f {} packages
        find -name "*sha256sums*" | xargs -i mv -f {} packages
        find -name "*manifest*" | xargs -i mv -f {} packages
        find -name "*vmlinuz*" | xargs -i mv -f {} packages
        find -name "*Image*" | xargs -i mv -f {} packages
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "BOT=TRUE" >> $GITHUB_ENV
        echo "::set-output name=status::success"
    
    - name: 上传.config
      uses: actions/upload-artifact@v2
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_CONFIG == 'true'
      with:
        name: .config_${{ env.NAME2 }}_${{ env.NAME1 }}_${{ env.date }}
        path: openwrt/bin/config

    - name: 上传固件
      uses: actions/upload-artifact@v2
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt-${{ env.NAME2 }}-${{ env.NAME1 }}-firmware-${{ env.date }}
        path: ${{ env.FIRMWARE }}

    - name: 网盘转存(7天)
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
    - name: 定时更新地址
      uses: softprops/action-gh-release@v1
      if: steps.organizer.outputs.status == 'success' && env.REGULAR_UPDATE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        name: 定时升级云端地址
        tag_name: update_Firmware
        files: ${{ env.artifact }}/*
    
    - name: 整理发布信息
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      run: |
        echo "### (#${{github.run_number}})$(date +"%Y年%m月%d号-%H点%M分")" > update_log.txt
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "##### 奶牛快传：$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> update_log.txt
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "##### WETRANSFER：$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> update_log.txt
    
    - name: 发布固件
      uses: ncipollo/release-action@v1
      if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
      with:
        name: ${{ env.NAME2 }}-${{ env.NAME1 }}
        tag: ${{ env.date2 }}
        token: ${{ secrets.REPO_TOKEN }}
        bodyFile: "update_log.txt"
        artifacts: "${{ env.FIRMWARE }}/*"
    
    - name: 微信通知
      uses: emon100/Action-Serverchan@v2
      if: steps.organizer.outputs.status == 'success' && env.SERVERCHAN_SCKEY == 'true'
      with:
        SCKEY: ${{ secrets.SCKEY }}
        text: 恭喜主人${{ env.NAME2 }}_${{ env.NAME1 }}固件编译成功！
        desp: 我亲爱的主人您使用${{matrix.target}}文件夹编译的[ ${{ env.NAME2 }}-${{ env.NAME1 }} ]固件(${CangKu}仓库的#${Run_number}号)顺利编译完成了！
